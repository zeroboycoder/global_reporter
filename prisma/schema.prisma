// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Admin {
    id       String  @id @default(cuid())
    loginId  String  @unique @map("login_id")
    photoUrl String  @map("photo_url") @db.VarChar(200)
    fullName String  @map("full_name") @db.VarChar(100)
    password String
    // permissions Json?
    isActive Boolean @default(true) @map("is_active")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    // Relationships
    loginAccessTokens LoginAccessToken[]

    // Indexes
    // @@index([created_at(sort: Desc)])
    @@index([loginId], name: "EmailIndex")
    @@map("admins")
}

model Reporter {
    id            String   @id @default(cuid())
    loginId       String   @unique @map("login_id")
    photoUrl      String?  @map("photo_url") @db.VarChar(200)
    fullName      String   @map("full_name") @db.VarChar(100)
    password      String
    reporter_info Json? // post_count , report_count
    country       Country? @relation(fields: [countryId], references: [id])
    countryId     Int?

    isGlobal Boolean @default(false) @map("is_global")
    isActive Boolean @default(true) @map("is_active")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    // Define many-to-many relationship with Category
    // categories Category[] @relation("ReporterCategories")

    loginAccessTokens  LoginAccessToken[]
    blogs              Blog[]
    notifications      Notification[]
    saveBlogs          SaveBlog[]
    reporterCategories ReporterCategories[]

    @@index([loginId], name: "EmailIndex")
    @@map("reporters")
}

model ReporterCategories {
    reporterId String @map("reporter_id")
    categoryId Int    @map("category_id")

    reporter Reporter @relation(fields: [reporterId], references: [id])
    category Category @relation(fields: [categoryId], references: [id])

    @@id([reporterId, categoryId])
    @@map("reporter_categories") // optional: map to a custom table name
}

model User {
    id       String  @id @default(cuid())
    deviceId String  @unique @map("device_id")
    photoUrl String? @map("photo_url") @db.VarChar(200)
    fullName String  @map("full_name") @db.VarChar(100)
    // userInfo Json?   @map("user_info")
    isActive Boolean @default(true) @map("is_active")

    country   Country? @relation(fields: [countryId], references: [id])
    countryId Int?

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    loginAccessTokens LoginAccessToken[]
    comments          Comment[]
    likes             Like[]
    userDevices       UserDevice[]
    notifications     Notification[]
    reportLists       ReportList[]
    saveBlogs         SaveBlog[]

    @@index([deviceId])
    @@index([fullName])
    @@map("users")
}

enum DeviceType {
    WEB
    ANDROID
    IOS
}

model UserDevice {
    id          Int        @id @default(autoincrement())
    User        User       @relation(fields: [userId], references: [id])
    userId      String
    type        DeviceType
    notiToken   String     @map("noti_token")
    settingInfo Json?      @map("setting_info")
    isActive    Boolean    @default(true) @map("is_active")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("user_devices")
}

model LoginAccessToken {
    id Int @id @default(autoincrement())

    adminId    String? @map("admin_id")
    reporterId String? @map("repoter_id")
    userId     String? @map("user_id")

    loginInfo Json?  @map("login_info")
    tokenKey  String @map("token_key")

    // refresh_token String?  @db.Text
    // expired_date  DateTime

    admin    Admin?    @relation(fields: [adminId], references: [id], map: "admin_id_provider")
    reporter Reporter? @relation(fields: [reporterId], references: [id])
    user     User?     @relation(fields: [userId], references: [id])

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@index([tokenKey])
    @@map("login_access_token")
}

enum VersionType {
    ANDROID
    IOS
}

model Version {
    id          Int         @id @default(autoincrement())
    version     String      @unique @map("version")
    url         String      @map("url")
    type        VersionType
    updatedDate DateTime    @updatedAt @map("updated_date")
    info        Json?       @map("info")

    skippable Boolean @default(true) @map("skippable")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("versions")
}

model Country {
    id       Int     @id @default(autoincrement())
    name     String  @unique
    photoUrl String? @map("photo_url")
    // order    Int
    isActive Boolean @default(true) @map("is_active")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    regions   Region[]
    blogs     Blog[]
    reporters Reporter[]
    users     User[]

    @@index([name])
    // @@index([order(sort: Asc)])
    @@map("countries")
}

model Region {
    id        Int     @id @default(autoincrement())
    // name      String  @unique
    name      String
    countryId Int     @map("country_id")
    isActive  Boolean @default(false) @map("is_active")
    // order     Int

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    country Country @relation(fields: [countryId], references: [id])
    blogs   Blog[]

    // @@index([country_id])
    // @@index([order(sort: Asc)])
    @@unique([countryId, name])
    @@index([name])
    @@map("regions")
}

model Category {
    id        Int     @id @default(autoincrement())
    name      String  @unique
    photoUrl  String? @map("photo_url")
    isActive  Boolean @default(true) @map("is_active")
    viewCount Int     @default(0) @map("view_count")
    order     Int

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    blogs Blog[]

    // Define many-to-many relationship with Reporter
    // reporters          Reporter[]           @relation("ReporterCategories")
    reporterCategories ReporterCategories[]

    @@index([name])
    @@map("categories")
}

// New
model Blog {
    id           String  @id @default(cuid())
    reporterId   String  @map("reporter_id")
    categoryId   Int
    isGlobal     Boolean @default(false) @map("is_global")
    isBreaking   Boolean @default(false) @map("is_Breaking")
    countryId    Int?    @map("country_id")
    regionId     Int?    @map("region_id")
    title        String
    content      String  @db.LongText // mysql
    coverPhoto   String? @map("cover_photo")
    viewCount    Int     @default(0) @map("view_count")
    likeCount    Int     @default(0) @map("like_count")
    commentCount Int     @default(0) @map("comment_count")
    shareCount   Int     @default(0) @map("share_count")
    reportCount  Int     @default(0) @map("report_count")
    hotCount     Int?    @map("hot_count")
    info         Json?   @map("info") // Reason

    // isActive Boolean @default(true) @map("is_active")
    status Int @default(0) @map("status") // 0 -> draft , 1-> published , 2-> reporter del ,  3-> report (ban) , 4 -> admin del 

    publishDate DateTime  @map("publish_date")
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime? @updatedAt @map("updated_at")
    reportDate  DateTime? @map("report_date")

    reporter Reporter @relation(fields: [reporterId], references: [id])
    category Category @relation(fields: [categoryId], references: [id])
    country  Country? @relation(fields: [countryId], references: [id])
    region   Region?  @relation(fields: [regionId], references: [id])

    // category    Category[]
    comments     Comment[]
    likes        Like[]
    reportLists  ReportList[]
    saveBlogs    SaveBlog[]
    Notification Notification[]

    @@index([title])
    @@index([status])
    @@index([createdAt(sort: Desc)])
    @@map("blogs")
}

model SaveBlog {
    id Int @id @default(autoincrement())

    blog   Blog   @relation(fields: [blogId], references: [id])
    blogId String @map("blog_id")

    users  User?   @relation(fields: [userId], references: [id])
    userId String? @map("user_id")

    reporter  Reporter? @relation(fields: [repoterId], references: [id])
    repoterId String?

    createdAt DateTime @default(now()) @map("created_at")
    // updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("save_blogs")
}

model Comment {
    id      Int    @id @default(autoincrement())
    content String

    reportCount  Int @default(0) @map("report_count")
    likeCount    Int @default(0) @map("like_count")
    commentCount Int @default(0) @map("comment_count")

    blogId String @map("blog_id")
    userId String @map("user_id")

    blog Blog @relation(fields: [blogId], references: [id])
    user User @relation(fields: [userId], references: [id])

    repliesId      Int?      @map("replies_id")
    replies        Comment[] @relation("replies")
    repliesComment Comment?  @relation("replies", fields: [repliesId], references: [id])

    likes       Like[]
    reportLists ReportList[]

    isActive Boolean @default(true) @map("is_active")

    createdAt    DateTime       @default(now()) @map("created_at")
    updatedAt    DateTime?      @updatedAt @map("updated_at")
    reportDate   DateTime?      @map("report_date")
    Notification Notification[]

    @@map("comments")
}

model Like {
    id Int @id @default(autoincrement())

    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId Int?     @map("comment_id")

    blog   Blog?   @relation(fields: [blogId], references: [id])
    blogId String? @map("blog_id")

    users  User   @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    createdAt DateTime @default(now()) @map("created_at")

    @@unique([userId, blogId])
    @@unique([userId, commentId])
    @@map("likes")
}

enum NotificationType {
    HOT_NEW // REPOTER id 
    COMMENT // user
    SYSTEM // *
    USER
    REPOTER
}

model Notification {
    id         Int              @id @default(autoincrement())
    type       NotificationType
    coverPhoto String?          @map("cover_photo")
    title      String
    content    String?          @db.LongText // mysql
    userId     String?          @map("user_id")
    repoterId  String?          @map("repoter_id")

    blog   Blog?   @relation(fields: [blogId], references: [id])
    blogId String? @map("blog_id")

    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId Int?     @map("commentId")

    isRead Boolean @default(false) @map("is_read")

    reporter Reporter? @relation(fields: [repoterId], references: [id])
    user     User?     @relation(fields: [userId], references: [id])

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("notifications")
}

model Setting {
    //  term and conditions & Policy and Privacy (reporter,user) | maintaince (repoter,user) | quick select (noti time) user | Content to admin (reporter)
    id Int @id @default(autoincrement())

    name     String  @unique
    payload  Json
    isActive Boolean @default(true) @map("is_active")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("setting")
}

model ProfileImage {
    id       Int     @id @default(autoincrement())
    order    Int
    photoUrl String  @map("photo_url") @db.VarChar(200)
    isActive Boolean @default(true) @map("is_active")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@index([order(sort: Desc)])
    @@map("profile_image")
}

enum ReportType {
    COMMENT
    BLOG
}

model Report {
    id       Int        @id @default(autoincrement())
    name     Json
    point    Int
    type     ReportType
    isActive Boolean    @default(true) @map("is_active")

    reportLists ReportList[]

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("reports")
}

model ReportList {
    id Int @id @default(autoincrement())

    reports  Report? @relation(fields: [reportId], references: [id])
    reportId Int?    @map("report_id")

    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId Int?     @map("comment_id")

    blog   Blog?   @relation(fields: [blogId], references: [id])
    blogId String? @map("blog_id")

    userId String
    user   User   @relation(fields: [userId], references: [id])

    // remark   String?
    isActive Boolean @default(true) @map("is_active")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("report_lists")
}

// user  -> ReportList | Notification | Like | Comment

// {
//     "notiTime": [
//         {
//             "status": true,
//             "startTime": "",
//             "EndTime": "",
//             "day": []
//         }
//     ]
// }
