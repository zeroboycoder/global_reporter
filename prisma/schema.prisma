//ðŸ§©Don't Edit this file.âœ¨Generated in Wed Jul 10 2024 14:30:15 GMT+0700 (Indochina Time)âœ¨
model About {
  id        Int      @id @default(autoincrement())
  context   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  news      News[]
  reporters Reporter[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model City {
  id          Int           @id @default(autoincrement())
  name        String
  countryId   Int
  country     Country       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  news        News[]
  userSetting UserSetting[]
  reporter    Reporter[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([countryId])
}

model Comment {
  id                Int            @id @default(autoincrement())
  newsId            Int
  news              News           @relation(fields: [newsId], references: [id])
  content           String
  userId            Int
  user              User           @relation(fields: [userId], references: [id])
  parentCommentId   Int?
  parentComment     Comment?       @relation("CommentToComment", fields: [parentCommentId], references: [id])
  replies           Comment[]      @relation("CommentToComment")
  likeCounts        Int            @default(0) // Like counts
  likedCommentUsers LikedComment[]
  reportedPoint     Float          @default(0)
  notifications     Notification?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([newsId, userId, parentCommentId])
}

model Country {
  id          Int           @id @default(autoincrement())
  imageUrl    String
  name        String
  citys       City[]
  news        News[]
  userSetting UserSetting[]
  repoter     Reporter[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model LikedComment {
  id        Int      @id @default(autoincrement())
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([commentId, userId])
}

model LikedNews {
  id        Int      @id @default(autoincrement())
  newsId    Int
  news      News     @relation(fields: [newsId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([newsId, userId])
}

model News {
  id              Int           @id @default(autoincrement())
  thumbnailImgUrl String
  title           String
  breakingNews    Boolean       @default(false)
  hotNews         Boolean       @default(false)
  content         String
  status          String
  viewCounts      Int           @default(0)
  likeCounts      Int           @default(0) // Like count
  shearCounts     Int           @default(0)
  reporterId      Int
  reporter        Reporter      @relation(fields: [reporterId], references: [id])
  cityId          Int?
  city            City?         @relation(fields: [cityId], references: [id])
  countryId       Int?
  country         Country?      @relation(fields: [countryId], references: [id])
  categoryId      Int
  category        Category      @relation(fields: [categoryId], references: [id])
  comments        Comment[]
  reportedPoint   Float         @default(0.0)
  notifications   Notification?
  likedNewsUsers  LikedNews[] // That table inlcudes newsId and userId
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([title, breakingNews, hotNews, viewCounts, reporterId, cityId, countryId, categoryId])
}

model Notification {
  id                   Int                 @id @default(autoincrement())
  type                 NotificationType
  newsId               Int?                @unique
  news                 News?               @relation(fields: [newsId], references: [id])
  commentId            Int?                @unique
  comment              Comment?            @relation(fields: [commentId], references: [id])
  systemNotificationId Int?                @unique
  systemNotification   SystemNotification? @relation(fields: [systemNotificationId], references: [id])
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  @@index([newsId, commentId, systemNotificationId])
}

enum NotificationType {
  NEWS
  COMMENT
  COMMENT_REPLY
  SUBCOMMENT_REPLY
  SYSTEM
}

model ReportComment {
  id        Int      @id @default(autoincrement())
  name      String
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReportNews {
  id        Int      @id @default(autoincrement())
  name      String
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reporter {
  id               Int        @id @default(autoincrement())
  reporterId       String
  password         String
  name             String
  countryId        Int?
  country          Country?   @relation(fields: [countryId], references: [id])
  cityId           Int?
  city             City?      @relation(fields: [cityId], references: [id])
  categoryIds      Category[]
  isGlobalReporter Boolean    @default(false)
  news             News[]

  @@index([countryId, cityId])
}

model SystemNotification {
  id              Int           @id @default(autoincrement())
  title           String
  content         String
  thumbnailImgUrl String
  imgUrl          String
  notifications   Notification?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Terms {
  id        Int      @id @default(autoincrement())
  context   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  profileUrl        String
  userNotifications UserNotification[]
  comments          Comment[]
  likedNews         LikedNews[]
  likedComments     LikedComment[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model UserNotification {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  days        String[]
  startTime   DateTime
  endTime     DateTime
  userSetting UserSetting?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
}

model UserSetting {
  id                     Int               @id @default(autoincrement())
  countryId              Int
  country                Country           @relation(fields: [countryId], references: [id])
  cityId                 Int
  city                   City              @relation(fields: [cityId], references: [id])
  timeFormat             TimeFormat
  userNotificationStatus Boolean
  userNotificationId     Int               @unique
  usernotification       UserNotification? @relation(fields: [userNotificationId], references: [id])
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt

  @@index([countryId, cityId, userNotificationId])
}

enum TimeFormat {
  T24
  T12
}
